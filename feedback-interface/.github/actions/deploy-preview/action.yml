name: Deploy preview app
description: Build image, create task definition, and deploy with AWS Fargate

outputs:
  url:
    value: ${{ steps.generate-url.outputs.url }}

runs:
  using: "composite"
  steps:
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        IMAGE_TAG=$GITHUB_SHA

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create task definition file
      env:
        IMAGE: ${{ steps.build-image.outputs.image }}
      id: create-task-def
      run: |
        cat << TASK_DEF > ./task-definition.json
        {
          "executionRoleArn": "$ROLE_ARN",
          "family": "feedback-interface-task", 
          "networkMode": "awsvpc", 
          "containerDefinitions": [
            {
              "name": "feedback", 
              "image": "treskey/feedback-interface", 
              "portMappings": [
                {
                    "containerPort": $PORT, 
                    "hostPort": $PORT, 
                    "protocol": "tcp"
                }
              ], 
              "essential": true,
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-create-group": "true",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-group": "/ecs/feedback-interface-logs",
                  "awslogs-stream-prefix": "uwu"
                }
              }
            }
          ], 
          "requiresCompatibilities": [
            "FARGATE"
          ], 
          "cpu": "256", 
          "memory": "512"
        }
        TASK_DEF
      shell: bash

    - name: Register task definition
      id: register-task-definition
      run: |
        echo "Registering Task Definition"
        echo "APP_TASK_DEF=$(aws ecs register-task-definition \
        --family "feedback-interface-task" \
        --cli-input-json file://task-definition.json \
        --query 'join(`:`,taskDefinition.[family,to_string(revision)])' \
        --output text)" >> $GITHUB_ENV
      shell: bash

    - name: Create Target Group
      id: target-group
      run: |
        echo "Creating Target Group"

        VPC_ID=$(aws ec2 describe-vpcs \
        --query 'Vpcs[0].VpcId' \
        --output text)

        TARGET_GROUP_ARN=$(aws elbv2 create-target-group \
        --name feedback-interface-target-group \
        --vpc-id $VPC_ID \
        --protocol HTTP \
        --port $PORT \
        --target-type ip \
        --query 'TargetGroups[0].TargetGroupArn' \
        --output text)

        echo "Creating Rule"

        ALB_ARN=$(aws elbv2 describe-load-balancers \
        --query 'LoadBalancers[?LoadBalancerName==`team5-load-balancer`] | [0].LoadBalancerArn' \
        --output text)

        LISTENER_ARN=$(aws elbv2 describe-listeners \
        --load-balancer-arn $ALB_ARN \
        --query 'Listeners[?Port==`443`] | [0].ListenerArn' \
        --output text)

        cat << RULES >> ./rules-conditions.json
        [
          {
            "Field": "host-header",
            "Values": ["feedback-interface.icyntkt.xyz"]
          }
        ]
        RULES

        RULE_ARN=$(aws elbv2 create-rule \
        --listener-arn $LISTENER_ARN \
        --conditions file://./rules-conditions.json \
        --priority 2 \
        --actions Type=forward,TargetGroupArn=$TARGET_GROUP_ARN \
        --query 'Rules[0].RuleArn' \
        --output text)

        echo "TARGET_GROUP_ARN=$TARGET_GROUP_ARN" >> $GITHUB_ENV
      shell: bash

    - name: "Launching App Service"
      run: |
        echo "Launching App Service"

        echo "APP_SERVICE=$(aws ecs create-service \
          --cluster $ECS_CLUSTER \
          --service-name feedback-interface-service-$GITHUB_SHA \
          --task-definition $APP_TASK_DEF \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={ \
              subnets=[$SUBNET_NAME], \
              securityGroups=[$SG_NAME], \
              assignPublicIp=ENABLED \
            }" \
          --load-balancers targetGroupArn=$TARGET_GROUP_ARN,containerName=feedback,containerPort=$PORT \
          --query 'service.serviceArn' \
          --output text)" >> $GITHUB_ENV
      shell: bash

    - name: "Waiting for app service to be stable"
      id: generate-url
      run: |
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services feedback-interface-$GITHUB_SHA

        echo "url=https://feedback-interface.icyntkt.xyz" >> $GITHUB_OUTPUT
      shell: bash
